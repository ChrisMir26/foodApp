{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// Definición del estado inicial de la slice\nconst initialState = {\n  products: [],\n  // Almacena los productos obtenidos\n  error: null,\n  // Almacena errores en caso de que ocurran\n  status: \"idle\" // Indica el estado actual de la solicitud\n};\n\n// Creación de la slice de Redux\nexport const productsSlice = createSlice({\n  name: \"products\",\n  // Nombre de la slice\n  initialState,\n  // Estado inicial\n  reducers: {},\n  // Reductores para actualizar el estado de manera síncrona (ninguno en este caso)\n  extraReducers: builder => {\n    // Manejo de acciones asincrónicas generadas por createAsyncThunk\n    builder.addCase(fetchProducts.fulfilled, (state, action) => {\n      state.status = \"fulfilled\"; // Cambia el estado a 'fulfilled' cuando la solicitud tiene éxito\n      // state.products = action.payload.data[0].products; // Actualiza la lista de productos con los datos recibidos\n\n      const groupedProducts = groupProductsByCategory(action.payload.data[0].products);\n      state.products = Object.values(groupedProducts);\n    });\n    builder.addCase(fetchProducts.pending, (state, action) => {\n      state.status = \"pending\"; // Cambia el estado a 'pending' mientras la solicitud está en progreso\n    });\n\n    builder.addCase(fetchProducts.rejected, (state, action) => {\n      state.status = \"error\"; // Cambia el estado a 'error' si la solicitud falla\n      state.error = action.error.message; // Almacena el mensaje de error\n    });\n  }\n});\n\nfunction groupProductsByCategory(products) {\n  return products.reduce((acc, product) => {\n    const categoryName = product.category.name;\n    if (!acc[categoryName]) {\n      acc[categoryName] = [];\n    }\n    acc[categoryName].push(product);\n    return acc;\n  }, {});\n}\n\n// Exporta una acción que no hace nada, ya que no hay reductores definidos\nexport const {\n  getProducts\n} = productsSlice.actions;\n\n// Exporta el reductor generado por createSlice\nexport default productsSlice.reducer;\n\n// Define una acción asincrónica utilizando createAsyncThunk\nexport const fetchProducts = createAsyncThunk(\"products/fetchProducts\", async () => {\n  // Realiza una solicitud HTTP para obtener datos de productos\n  const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/products-by-categories`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch products\"); // Lanza un error si la solicitud no tiene éxito\n  }\n\n  const data = await response.json(); // Convierte la respuesta en formato JSON\n  return data; // Devuelve los datos para que se almacenen en el estado\n});\n\n// Selector para obtener la lista de productos desde el estado\nexport const selectAllProducts = state => state.products.products;\n\n// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// const initialState = {\n//     products: [],\n//     error: null,\n//     status: 'idle',\n// }\n\n// export const productsSlice = createSlice({\n//     name: 'products',\n//     initialState,\n//     reducers: {},\n//     extraReducers: (builder) => {\n//         builder.addCase(fetchProducts.fulfilled, (state, action) => {\n//             state.status = 'fulfilled';\n//             state.products = action.payload.data[0].products;\n//           });\n\n//         builder.addCase(fetchProducts.pending, (state, action) => {\n//             state.status = 'pending';\n//         });\n//         builder.addCase(fetchProducts.rejected, (state, action) => {\n//             state.status = 'error';\n//             state.error = action.error.message;\n//         });\n//     },\n// });\n\n// export const { getProducts } = productsSlice.actions\n\n// export default productsSlice.reducer\n\n// export const fetchProducts = createAsyncThunk('products/fetchProducts', async () => {\n//     const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/products-by-categories`);\n\n//     if (!response.ok) {\n//         throw new Error('Failed to fetch products');\n//     }\n\n//     const data = await response.json();\n//     return data;\n// });\n\n// export const selectAllProducts = state => state.products.products;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","products","error","status","productsSlice","name","reducers","extraReducers","builder","addCase","fetchProducts","fulfilled","state","action","groupedProducts","groupProductsByCategory","payload","data","Object","values","pending","rejected","message","reduce","acc","product","categoryName","category","push","getProducts","actions","reducer","response","fetch","process","env","REACT_APP_BACKEND_URL","ok","Error","json","selectAllProducts"],"sources":["/Users/chris/Desktop/food-ordering-app/front/src/store/menu/productsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// Definición del estado inicial de la slice\nconst initialState = {\n  products: [], // Almacena los productos obtenidos\n  error: null, // Almacena errores en caso de que ocurran\n  status: \"idle\", // Indica el estado actual de la solicitud\n};\n\n// Creación de la slice de Redux\nexport const productsSlice = createSlice({\n  name: \"products\", // Nombre de la slice\n  initialState, // Estado inicial\n  reducers: {}, // Reductores para actualizar el estado de manera síncrona (ninguno en este caso)\n  extraReducers: (builder) => {\n    // Manejo de acciones asincrónicas generadas por createAsyncThunk\n    builder.addCase(fetchProducts.fulfilled, (state, action) => {\n      state.status = \"fulfilled\"; // Cambia el estado a 'fulfilled' cuando la solicitud tiene éxito\n      // state.products = action.payload.data[0].products; // Actualiza la lista de productos con los datos recibidos\n\n      const groupedProducts = groupProductsByCategory(\n        action.payload.data[0].products\n      );\n      state.products = Object.values(groupedProducts);\n    });\n\n    builder.addCase(fetchProducts.pending, (state, action) => {\n      state.status = \"pending\"; // Cambia el estado a 'pending' mientras la solicitud está en progreso\n    });\n    builder.addCase(fetchProducts.rejected, (state, action) => {\n      state.status = \"error\"; // Cambia el estado a 'error' si la solicitud falla\n      state.error = action.error.message; // Almacena el mensaje de error\n    });\n  },\n});\n\nfunction groupProductsByCategory(products) {\n  return products.reduce((acc, product) => {\n    const categoryName = product.category.name;\n    if (!acc[categoryName]) {\n      acc[categoryName] = [];\n    }\n    acc[categoryName].push(product);\n    return acc;\n  }, {});\n}\n\n// Exporta una acción que no hace nada, ya que no hay reductores definidos\nexport const { getProducts } = productsSlice.actions;\n\n// Exporta el reductor generado por createSlice\nexport default productsSlice.reducer;\n\n// Define una acción asincrónica utilizando createAsyncThunk\nexport const fetchProducts = createAsyncThunk(\n  \"products/fetchProducts\",\n  async () => {\n    // Realiza una solicitud HTTP para obtener datos de productos\n    const response = await fetch(\n      `${process.env.REACT_APP_BACKEND_URL}/products-by-categories`\n    );\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch products\"); // Lanza un error si la solicitud no tiene éxito\n    }\n\n    const data = await response.json(); // Convierte la respuesta en formato JSON\n    return data; // Devuelve los datos para que se almacenen en el estado\n  }\n);\n\n// Selector para obtener la lista de productos desde el estado\nexport const selectAllProducts = (state) => state.products.products;\n\n// import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// const initialState = {\n//     products: [],\n//     error: null,\n//     status: 'idle',\n// }\n\n// export const productsSlice = createSlice({\n//     name: 'products',\n//     initialState,\n//     reducers: {},\n//     extraReducers: (builder) => {\n//         builder.addCase(fetchProducts.fulfilled, (state, action) => {\n//             state.status = 'fulfilled';\n//             state.products = action.payload.data[0].products;\n//           });\n\n//         builder.addCase(fetchProducts.pending, (state, action) => {\n//             state.status = 'pending';\n//         });\n//         builder.addCase(fetchProducts.rejected, (state, action) => {\n//             state.status = 'error';\n//             state.error = action.error.message;\n//         });\n//     },\n// });\n\n// export const { getProducts } = productsSlice.actions\n\n// export default productsSlice.reducer\n\n// export const fetchProducts = createAsyncThunk('products/fetchProducts', async () => {\n//     const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/products-by-categories`);\n\n//     if (!response.ok) {\n//         throw new Error('Failed to fetch products');\n//     }\n\n//     const data = await response.json();\n//     return data;\n// });\n\n// export const selectAllProducts = state => state.products.products;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
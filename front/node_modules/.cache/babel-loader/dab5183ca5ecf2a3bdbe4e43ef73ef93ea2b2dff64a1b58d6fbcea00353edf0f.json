{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Definimos el estado inicial del carrito\nconst initialState = {\n  products: [] // Inicialmente, el carrito está vacío\n};\n\n// Creamos un \"slice\" de Redux llamado \"cart\"\nexport const cartSlice = createSlice({\n  name: \"cart\",\n  // Nombre del \"slice\"\n  initialState,\n  // Estado inicial del \"slice\"\n  reducers: {\n    // Acción para agregar un producto al carrito\n    addToCart: (state, action) => {\n      const productInCart = state.products.find(product => product._id === action.payload._id);\n      if (productInCart) {\n        productInCart.amount += 1;\n      } else {\n        state.products.push({\n          ...state,\n          ...action.payload,\n          amount: 1\n        });\n      }\n    },\n    // Acción para vaciar el carrito\n    clearCart: state => {\n      return {\n        products: [] // El carrito se vacía\n      };\n    },\n\n    // Acción para incrementar la cantidad de un producto en el carrito\n    incrementProductAmount: (state, action) => {\n      return {\n        products: state.products.map(product => product.id === action.payload.id ? {\n          ...product,\n          amount: product.amount += 1\n        } : product)\n      };\n    },\n    // Acción para decrementar la cantidad de un producto en el carrito\n    decrementProductAmount: (state, action) => {\n      return {\n        products: state.products.map(product => product.id === action.payload.id ? {\n          ...product,\n          amount: product.amount - 1\n        } : product)\n      };\n    }\n  }\n});\n\n// Exportamos las acciones generadas automáticamente por createSlice\nexport const {\n  addToCart,\n  clearCart,\n  incrementProductAmount,\n  decrementProductAmount\n} = cartSlice.actions;\n\n// Exportamos el reducidor generado automáticamente por createSlice\nexport default cartSlice.reducer;\nexport const cartProducts = state => state.cart.products;","map":{"version":3,"names":["createSlice","initialState","products","cartSlice","name","reducers","addToCart","state","action","productInCart","find","product","_id","payload","amount","push","clearCart","incrementProductAmount","map","id","decrementProductAmount","actions","reducer","cartProducts","cart"],"sources":["/Users/chris/Desktop/food-ordering-app/front/src/store/cart/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// Definimos el estado inicial del carrito\nconst initialState = {\n  products: [], // Inicialmente, el carrito está vacío\n};\n\n// Creamos un \"slice\" de Redux llamado \"cart\"\nexport const cartSlice = createSlice({\n  name: \"cart\", // Nombre del \"slice\"\n  initialState, // Estado inicial del \"slice\"\n  reducers: {\n    // Acción para agregar un producto al carrito\n    addToCart: (state, action) => {\n      const productInCart = state.products.find(product => product._id === action.payload._id);\n\n      if (productInCart) {\n        productInCart.amount += 1;\n      } else {\n        state.products.push({ ...state, ...action.payload, amount: 1 });\n      }\n    },\n    // Acción para vaciar el carrito\n    clearCart: (state) => {\n      return {\n        products: [], // El carrito se vacía\n      };\n    },\n    // Acción para incrementar la cantidad de un producto en el carrito\n    incrementProductAmount: (state, action) => {\n      return {\n        products: state.products.map((product) =>\n          product.id === action.payload.id\n            ? { ...product, amount: product.amount+= 1 }\n            : product\n        ),\n      };\n    },\n    // Acción para decrementar la cantidad de un producto en el carrito\n    decrementProductAmount: (state, action) => {\n      return {\n        products: state.products.map((product) =>\n          product.id === action.payload.id\n            ? { ...product, amount: product.amount - 1 }\n            : product\n        ),\n      };\n    },\n  },\n});\n\n// Exportamos las acciones generadas automáticamente por createSlice\nexport const {\n  addToCart,\n  clearCart,\n  incrementProductAmount,\n  decrementProductAmount,\n} = cartSlice.actions;\n\n// Exportamos el reducidor generado automáticamente por createSlice\nexport default cartSlice.reducer;\n\n\nexport const cartProducts = state => state.cart.products"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE,CAAE;AAChB,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;EACnCI,IAAI,EAAE,MAAM;EAAE;EACdH,YAAY;EAAE;EACdI,QAAQ,EAAE;IACR;IACAC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5B,MAAMC,aAAa,GAAGF,KAAK,CAACL,QAAQ,CAACQ,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,GAAG,KAAKJ,MAAM,CAACK,OAAO,CAACD,GAAG,CAAC;MAExF,IAAIH,aAAa,EAAE;QACjBA,aAAa,CAACK,MAAM,IAAI,CAAC;MAC3B,CAAC,MAAM;QACLP,KAAK,CAACL,QAAQ,CAACa,IAAI,CAAC;UAAE,GAAGR,KAAK;UAAE,GAAGC,MAAM,CAACK,OAAO;UAAEC,MAAM,EAAE;QAAE,CAAC,CAAC;MACjE;IACF,CAAC;IACD;IACAE,SAAS,EAAGT,KAAK,IAAK;MACpB,OAAO;QACLL,QAAQ,EAAE,EAAE,CAAE;MAChB,CAAC;IACH,CAAC;;IACD;IACAe,sBAAsB,EAAEA,CAACV,KAAK,EAAEC,MAAM,KAAK;MACzC,OAAO;QACLN,QAAQ,EAAEK,KAAK,CAACL,QAAQ,CAACgB,GAAG,CAAEP,OAAO,IACnCA,OAAO,CAACQ,EAAE,KAAKX,MAAM,CAACK,OAAO,CAACM,EAAE,GAC5B;UAAE,GAAGR,OAAO;UAAEG,MAAM,EAAEH,OAAO,CAACG,MAAM,IAAG;QAAE,CAAC,GAC1CH,OACN;MACF,CAAC;IACH,CAAC;IACD;IACAS,sBAAsB,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MACzC,OAAO;QACLN,QAAQ,EAAEK,KAAK,CAACL,QAAQ,CAACgB,GAAG,CAAEP,OAAO,IACnCA,OAAO,CAACQ,EAAE,KAAKX,MAAM,CAACK,OAAO,CAACM,EAAE,GAC5B;UAAE,GAAGR,OAAO;UAAEG,MAAM,EAAEH,OAAO,CAACG,MAAM,GAAG;QAAE,CAAC,GAC1CH,OACN;MACF,CAAC;IACH;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EACXL,SAAS;EACTU,SAAS;EACTC,sBAAsB;EACtBG;AACF,CAAC,GAAGjB,SAAS,CAACkB,OAAO;;AAErB;AACA,eAAelB,SAAS,CAACmB,OAAO;AAGhC,OAAO,MAAMC,YAAY,GAAGhB,KAAK,IAAIA,KAAK,CAACiB,IAAI,CAACtB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}